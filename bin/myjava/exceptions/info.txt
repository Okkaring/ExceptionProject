※ 예외 Exception

우리가 살다보면 뜻하지 않은 일들을 당하게 된다.
이렇게 예상하지 못한 일들을 '예외'exception 라 하고 대비하고 준비하는 것이 바로 예외 처리이다.

	1.예외처리에 대한 필요성과 이해
자바에서 프로그램이 실행하는 도중에 예외가 발생하면, 발생된 그 시점에서 프로그램이 바로 종료된다.
때에 따라서는 예외가 발생했을 때, 프로그램을 종료시키는 것이 바른 판단일 수도 있다.
하지만, 가벼운 예외이거나 예상을 하고 있었던 예외라면 프로그램을 종료시키는 것이 조금은 가혹하다고 느껴진다.
그래서 예외처리라는 수단(mechanism)이 제안되었고 예외처리를 통해
우선 프로그램의 비정상적인 종료를 막고 정상적인 프로그램을 계속 진행 할 수 있게 되었다.

	2. 예외의 종류
자바에서 발생하는 모든 에외는 다음과 같은 구조를 이루면서 각각 객체로 인식되고 있다.
Trowable - Exception / Error

01) 예외(Exception) : 가벼운 오류이며 프로그램적으로 처리한다. (코딩으로 처리.. 개발자가 할 것)
02) 오류(Error) : 치명적인 오류이며 JVM에 의존하여 처리한다. 실행 자체가 되질 않는다.

★ 예외를 구분하자.
	일반적 예외 :
컴파일할 때 발생하는 오류이며 입출력에 관련해서 파일에 출력을 해야 하는데,
쓰고자 하는 파일이 존재하지않는다는 예외(FileNotFoundException)와
시간제 프로그래밍을 하면서 순간 시스템으로 하여금 타이밍을 놓쳐 중단되는 예외(InterruptedException)등이 있다.
이는 컴파일할 때에 확인되므로 반드시 예외처리를 해야만 컴파일 된다.


★ ★  실행시 예외 :
실행하는 프로그램(process)이 실행되다가...
배열의 범위를 넘었을 때 발생하는 예외(ArrayIndexOutOfBoundsExcetion),
특정 수를 0으로 나누기했을 때 발생하는 예외(ArithmeticException)등이 있다.
한 마디로 프로그래머의 실수로 인한 예외라 할 수 있다.
실행할 때 발생하는 예외이므로 예외처리를 하지 않아도 컴파일에는 무리가 없다.

이처럼 예외를 구분한 이유를 살펴보자. 만약, 특정한 변수에 값이 들어 올 때가 있고 때에 따라서는 값이 들어오지 못할 때도 있다.
이때 값이 들어 올 때는 모르지만 값이 들어오지 못할 때를 생각해서 예외처리를 해야 한다면
배열을 포함해서 모든 변수들 또는 모든 코드들에게게 예외처리를 해야 한다.
그렇게 되면 과부하가 크게 걸릴 것이다. 따라서 실행 시 발생 가능한 예외에 대해서는 "try ~ catch"문으로
인한 예외처리보다는 프로그래머들의 주의를 요구하여 컴파일 시에 확인하지 않으므로 '확인되지 않은 예외(Unchecked Exception)'
로 구분하게 된 것이다.

그렇지만 예외를 어떻게 기억하고 구별할 수 있는지가 궁금할 수도 있다. 
하지만, 특별히 외우거나 구별을 하려고 노력을 할 필요는 없다. 왜냐하면 일반적 예외들은
컴파일 시에 어떤 예외가 발생할 수 있으므로 예외에 대한 처리를 하라는 메시지가 나타난다.
그리고 11장에 배울 스레드나 12장에서 다루는 입출력에 관련된 메서드를 사용할 때에는 API문서를 참조하면
사용하려는 메서드가 어떤 예외가 발생시킬 수 있는 지 알 수 있다.

그리고 '실행 시 예외'또한 마찬가지로 실행할 때 발생한 예외에 대한 메시지가 나타나는데,
예외에 대한 처리를 생각한다면 예외처리를 해주면 된다.
그렇지 않고 프로그램 종료로 두는 것이 좋겠다는 생각이라면 그냥 두어 JVM에 의해 종료가 되도록 하는 것이 보통이다.(return)

----------------------------------------------------

다시 한 번 강조하지만 예외처리를 하는 가장 큰 이유는 예외가 발생하여
프로그램의 비정상적인 종료를 막고 정상적인 수행을 할 수 있도록 하기 위해서다.

예외에 대한 처리는 크게 두가지가 있다. 예외가 발생하는 시점에서 바로 try~catch문으로 처리를 하는 방법과
현재 영역(메서드)을 호출한 다른 영역(메서드)으로 발생한 예외 객체를 throws문으로 던져 양도하는 방법이 있다.
그럼 먼저 try~catch문으로 바로 처리하는 방법부터 알아보자.

	★★★★★ try~catch문으로 처리하는 예외
예상했던 예외가 발생하면 해당 예외 객체(Class)를 잡아(catch)내어 원하는 동작을 수행하고 프로그램이 종료되지 않고
계속 진행 할 수 있도록 하는 것을 목적으로 한다. 다음은 try~catch문의 구성이다.

	try{
		//예외가 발생 가능한 문장들;
	}catch(예상되는_예외객체 변수명){
		//해당 예외가 발생했을 때 수행할 문장들;
	}
	
	예상예외객체는 빨간줄 위에 커서올려보면 객체타입을 알랴줌.
	
----------------------------------------------------

	※ finally 의 필요성
예외가 발생하든 발행하 지 않든 무조건 수행하는 부분이 바로 finally 영역이다.
이는 자료베이스(database)를 처리하거나 파일을 처리한다면 꼭 필요한 부분이다.
이유는 DB를 열었다거나 또는 파일을 열었다면 곡 닫아주고 프로그램이 종료되어야 한다.

DB나 파일을 그냥  열어 둔 채로 프로그램을 종료하는 형태는 수돗물을 열어둔 채 외출하는 것과 같다.
이런 부분에서 안전하게 처리하는 문장을 구현해 주는 데 있어 finally는 꼭 필요하다.

구성 :
	try{
		//예외가 발생 가능한 문장들;
	}catch(예상되는_예외객체1 변수명){
		//해당 예외가 발생했을 시 수행할 문장들;
	}finally{
		//예외발생 여부와 상관없이 수행할 문장들;
	}

----------------------------------------------------

	※다중 catch문
다중 catch문은 하나의 tryy문 내에 여러 개의 예외가 발생할 수 있을 때 사용한다.

구성 :
	try{
		//예외가 발생 가능한 문장들;
	}catch(예상되는_예외객체1 변수명){
		//해당 예외가 발생했을 시 수행할 문장들;
	}catch(예상되는_예외객체2 변수명){
		//해당 예외가 발생했을 시 수행할 문장들;
	}catch(예상되는_예외객체3 변수명){
		//해당 예외가 발생했을 시 수행할 문장들;
	}
	
	※ 다중 catch문에서 주의 사항

(즉, 다중 Exception은 쓰지않는다는 말...)

하나의 try문 내에서 여러 개의 예외가 발생할 수 있으므로 이에 따라 여러 개의 catch문이 제공되는 것이다.
하지만, 여기서 반드시 지켜야 하는 것이 있는데, 그것은 바로 catch문에 정의될 예외 객체들의 배치부분이다.
우선 제일 먼저 비교되는 부분이 try범위 다음에 첫번째 오는 catch문이며 하나씩 밑으로 내려가면서 비교하고
수행할 예외 객체를 찾아가게 되는 순서다.

일반적 예외에서 가장 상위인 클래스가 Exception이다. 그러므로 가장 아래쪽에 정의해야한다.
이렇게 하는 이유는 예외는 상위 클래스가 모든 예외를 가지고 있으므로 가장 위에 정의를 하게 되면
모든 예외를 처리하게 되므로 두 번째 catch문부터는 절대 비교 수행할 수 없게 된다.

예외가 이미 잡혀있다는 오류가 나타난다. 즉, Exception이라는 예외 클라스가
하위 예외 클라스들을 모두 가지고 있기 때문에 먼저 정의해서는 안된다.

----------------------------------------------------
	※ throws 예약어
throws는 예외를 처리하기 보다는 발생한 예외 객체를 양도(throws)하는 것이다.
즉, 현재 메서드에서 예외처리를 하기가 조금 어려운 상태일 떄 현재 영역을 호출해준 곳으로 발생한 예외 객체를
대신 처리해 달라며 양도하는 것이다. 사용법은 다음의 구성과 같이 throws라는 예약어를 통해 메서드를 선언하는 것이다.

throws 사용법은 다음과 같다.
[접근제한][반환형][메서드](인자1,...인자n)throws 예외클래스1, ...예외클래스n{}

----------------------------------------------------
	※ 예제 프로젝트
<배송 시스템>
1. 영수증(송장)생성: 예외발생가능성 有
2. 포장 : 예외발생가능성 有
3. 택배 : 예외발생가능성 有

만약, 실행순서가 섞이면 어떤 문제가 발생할까?
예를들어 영수증 생성 단계에서 예외가 발생했으나, 택배 단계에서는 예외가 발생하지 않을경우,
이를 해결하기위해서 위의 모든 단계(3가지)를 묶어서 처리해야할 것이다.

그러니 main 메소드가 throws Exception 하는 식으로 만들어야겠죠.

----------------------------------------------------

프로그램 실행 중 어떤 원인에 의해 오작동하거나 
비정상적으로 종료되는 경우가 있는데,
이런 결과를 초래하는 원인을 프로그램 에러 또는 오류라고 한다.
발생시점에 따라 다음과 같이 두종류로 구분한다.

컴파일 에러 (compile error) : 컴파일 시에 발생하는 에러
런타임 에러 (runtime error) : 실행 시에 발생하는 에러
논리적 에러 (logical error) : 실행은 되지만 의도와 다르게 동작하는 것

자바에서는 실행 시에(run time) 발생하는 프로그램 오류를 다음과 같이 구분한다


	에러(error):
i.e OutOfMemoryError, StackOverflowError)와 같이 수습될 수 없는 심각한 오류
	예외(exception):
코드에 의해 수습될 수 있는 다소 미약한 오류





